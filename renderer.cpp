#include "renderer.h"

extern const uint16_t Image[];

Renderer::Renderer( Adafruit_ILI9341_STM & tft1, uint16_t width1, uint16_t height1) :
    tft (tft1), wid ( width1 ), hei ( height1 )
{
}


void Renderer::renderWithDeep(D2Triangle * d2s, uint8_t length ) {
    RenderPoint lp, rp;
    bool needclear = true;
    for ( int y= 0; y < hei; y++) {
        if ( needclear ) {
          memset ( colorLine, 0x00, wid*2 );
          memset ( deepLine , 0xff, wid*2 );
          needclear = false;
        }
        for ( unsigned int d = 0; d < length; d++ )     
            if ( y >= d2s[d].p0.y && y <= d2s[d].p2.y ) {                   // moved here from D2.scanline to save calling cost for performance reason // public vars etc... ARghhhh
                d2s[d].scanLine( y, lp, rp) ;
                if ( lp.x <= 0  ) continue; // || rp.x >= wid ) continue;
                if ( rp.x >= wid )  rp.x = wid;
                
                int16_t dd = ( rp.deep - lp.deep ) / ( rp.x- lp.x +1);      // calcualte deep steps
                unsigned int  nc = lp.deep;
                if ( !needclear ) {                                       // first line no need deep test
                  for ( int x = lp.x; x < rp.x; x++ ) {                     
                          colorLine[x] =  d2s[d].color;
                          deepLine [x] =  nc;                      
                          nc+= dd;
                 }
               } else {
                  for ( int x = lp.x; x < rp.x; x++ ) {
                      if ( deepLine[x]  > nc  ) {
                          colorLine[x] =  d2s[d].color;
                          deepLine [x] =  nc;
                      }
                      nc+= dd;
                }
               }
               needclear = true;
            }
         tft.pushLine ( colorLine , wid );
    }
}

void Renderer::renderWithTexture(D2Triangle * d2s, uint8_t length) {

	RenderPoint lp, rp;
	bool needclear = true;
	for (int y = 0; y < hei; y++) {
		if (needclear) {
			memset(colorLine, 0x00, wid * 2);
		//	memset(deepLine, 0xff, wid * 2);
			needclear = false;
		}
		for (unsigned int d = 0; d < length; d++)
			if (y >= d2s[d].p0.y && y <= d2s[d].p2.y) {                   // moved here from D2.scanline to save calling cost for performance reason // public vars etc... ARghhhh
				d2s[d].scanLine(y, lp, rp);
				if (lp.x <= 0) continue; // || rp.x >= wid ) continue;
				if (rp.x >= wid)  rp.x = wid;
				// int16_t dd = (rp.deep - lp.deep) / (rp.x - lp.x + 1);      // calcualte deep steps
				int16_t textUstep = ((rp.u - lp.u) *100 / ( rp.x - lp.x));		  // calculate Text U step
				int16_t textVstep = ((rp.v - lp.v) *100 / ( rp.x - lp.x));		  // calcualte Text V step	
        
				int16_t u = lp.u * 100;
				int16_t v = lp.v * 100;

					for (int x = lp.x; x < rp.x; x++) {		
            u += textUstep;
            v += textVstep;						
						colorLine[x] = Image[  ( v / 100 * 32 +  u / 100)  ];					
					}	
         // colorLine[lp.x] = 0xff00;		
         // colorLine[rp.x] = 0xff00;    	
				needclear = true;
			}
		tft.pushLine(colorLine, wid);
	}
}





void Renderer::renderWithoutDeep(D2Triangle * d2s, uint8_t length ) {
    RenderPoint lp, rp;
    bool needclear = true;
    for ( int y= 0; y < hei; y++) {
        if ( needclear ) {
          memset ( colorLine, 0x00, wid*2 );
          //memset ( deepLine , 0xff, wid*2 );
          needclear = false;
        }
        for ( unsigned int d = 0; d < length; d++ )     
            if ( y >= d2s[d].p0.y && y <= d2s[d].p2.y ) {  // moved here from D2.scanline to save calling cost for performance reason // public vars etc... ARghhhh
                d2s[d].scanLine( y, lp, rp) ;
                if ( lp.x <= 0 || rp.x >= wid ) continue;                         
                for ( int x = lp.x; x < rp.x; x++ ) {                     
                          colorLine[x] =  d2s[d].color;                        
                 }     
               needclear = true;
            }
            tft.pushLine ( colorLine , wid );
       }
}
void Renderer::renderWires(D2Triangle * d2s, uint8_t length ) {
    RenderPoint lp, rp;
    for ( int y= 0; y < hei; y++) {
        memset ( colorLine , 0x00, wid *2);
       //memset ( deepLine , 0xff,  wid *2 );
        for ( unsigned int d = 0; d < length; d++ )
            if (  y > d2s[d].p0.y && y < d2s[d].p2.y  ) {            // moved here from D2.scanline to save calling cost for performance reason // public vars etc... ARghhhh
                d2s[d].scanLine( y, lp, rp);
                if ( lp.x <= 0 || rp.x >= wid ) continue;
                colorLine[rp.x] = d2s[d].color;
                colorLine[lp.x] = d2s[d].color;
            }
         tft.pushLine ( colorLine , wid );
    }
}


const uint16_t Image[] PROGMEM = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line  1*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line  2*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line  3*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x2a94, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line  4*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0,/* line  5*/
0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0,/* line  6*/
0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0,/* line  7*/
0x0, 0x0, 0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0,/* line  8*/
0x0, 0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0, 0x0,/* line  9*/
0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0,/* line 10*/
0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0,/* line 11*/
0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0,/* line 12*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59,/* line 13*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 14*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x51d, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 15*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x51d, 0x51d, 0x9edd, 0x9edd, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 16*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x51d, 0x9edd, 0x9edd, 0xffff, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 17*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x51d, 0x9edd, 0xffff, 0xffff, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x9edd, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 18*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x51d, 0x9edd, 0xffff, 0xffff, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x9edd, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59,/* line 19*/
0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x51d, 0x9edd, 0x9edd, 0xffff, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x9edd, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59,/* line 20*/
0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0xf7ff, 0x3a59, 0x9edd, 0x9edd, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x9edd, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0,/* line 21*/
0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x3a59, 0x9edd, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0,/* line 22*/
0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0,/* line 23*/
0x0, 0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0x51d, 0xffff, 0x9edd, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x0, 0x0,/* line 24*/
0x0, 0x0, 0x0, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x9edd, 0x9edd, 0x51d, 0x51d, 0x51d, 0x51d, 0xff9f, 0x2ad1, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0,/* line 25*/
0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x9edd, 0x9edd, 0x2255, 0x2254, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0,/* line 26*/
0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0,/* line 27*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0,/* line 28*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line 29*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line 30*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,/* line 31*/
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x3a59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0/* line 32*/
};
